name: Release

on:
  push:
    branches:
      - main

jobs:
  generate-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Run helm-docs Docker image
        run: |
          docker run --rm -v ${{ github.workspace }}:/helm-docs jnorwood/helm-docs:latest

      - name: Create new branch for README update
        id: create_branch
        run: |
          # Configure Git
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Stage the README.md file
          git add README.md
          
          # Check for changes in staged files
          if git diff --cached --quiet; then
            echo "No changes in README.md. Skipping branch creation."
            echo "::set-output name=has_changes::false"
          else
            # Create a new branch and commit the changes
            git checkout -b update-readme
            git commit -m "chore: Update documentation [skip ci]"
            git push origin update-readme
            echo "::set-output name=has_changes::true"
          fi

      - name: Merge README branch into main without triggering workflow
        if: steps.create_branch.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --base main --head update-readme --title "Update README" --body "Automated README update"
          PR_NUMBER=$(gh pr list --state open --head update-readme --json number -q '.[0].number')
          gh pr merge $PR_NUMBER --merge --admin --delete-branch

  release:
    needs: generate-readme
    runs-on: ubuntu-latest
    permissions:
        contents: write
        pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.data.length === 0) {
              return '1.0.0';
            }
            return releases.data[0].tag_name.replace(/^v/, '');

      - name: Parse release type from PR description
        id: parse_release_type
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            const pr = prs.data[0];
            const match = pr.body.match(/release_type:\s*(major|minor|tiny)/i);
            return match ? match[1].toLowerCase() : 'tiny';

      - name: Calculate next version
        id: next_version
        run: |
          PREV_VERSION="${{ steps.get_release.outputs.result }}"
          RELEASE_TYPE="${{ steps.parse_release_type.outputs.result }}"
          IFS='.' read -r MAJOR MINOR TINY <<< "$PREV_VERSION"
          if [ "$RELEASE_TYPE" = "major" ]; then
            MAJOR=$((MAJOR+1)); MINOR=0; TINY=0
          elif [ "$RELEASE_TYPE" = "minor" ]; then
            MINOR=$((MINOR+1)); TINY=0
          else
            TINY=$((TINY+1))
          fi
          echo "version=v${MAJOR}.${MINOR}.${TINY}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.next_version.outputs.version }}
          name: Release ${{ steps.next_version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
